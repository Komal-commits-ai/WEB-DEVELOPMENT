############branch############
make the copy and work on it and then pull request to check whether it is correct or not and the merge if it is correct then merge branch to main..
##component k andar sab kuch return m likhna h 
############################################WAYS of exporting:
1)export default function name(){return(.......)}
2)function name{return(....)} 
    export default name
3)export const name=()=>{(return.......)}
###const keyword in the arrow function
##########################################DEFAULT EXPORT AND IMPORT(keyword default)
when there is only one sharing(no need of same name)
export default name
import name(any) from './App.jsx'

###########################################NAMED EXPORT AND IMPORT(default{} curly braces)
export{name as different name} 
import{name } from "ih"
###########################################
simple use default when we want to use different name.
use {} if we want same name or multiple functions. and not default with the normal function.
##we can use different named components in main default component
##################################JSX:javascript XML (JS+HTML) can use javascript variables in jsx {} 
create variables and store the html
html in only return 
by functions and exporting we are basically creating the tags 
#################making tags############
<tag atrributes>content<tag close>
making###########function tag(component) name(support){return <> 
{support.children} from content within and 
{support.attribute(prop)} it can be called as variable can be use as a template in this tag </>}
can be a tag and template
#########################PROPTYPES################
Adding restrictions to the function 
// Add this AFTER your component definition
UserProfile.propTypes = {
  name: PropTypes.string.isRequired,      // Must be string, required
  age: PropTypes.number,                  // Must be number, optional
  email: PropTypes.string.isRequired,     // Must be string, required
  isVerified: PropTypes.bool              // Must be boolean, optional
oneOf([])
oneOfType([])
};
##########################hooks??
**************************useState :when variable is displayed on the page and its value is changing 
one parameter:initial value
two return=value,function to change value 
***************************useEffect :when we want to run the function with conditions
useEffect(callback function, and condition to run)
1)[]:run only one time when compt mount agr unmount pr chlana h to callback k andar likhdo return function
2)[var]:jab variabl change ho iske andar bhi hm return function likhskhte h 
3)nothing:every change infinite times 
events??
#############################################USE TAILWIND CSS##################
we can use built-in classes of tailwind by using className and every tag is a closing tag one tag is always closed like <tag/>

