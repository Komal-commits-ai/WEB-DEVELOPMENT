#############################JAVASCRIPT##############
. Variables & Data Types
Concept	JavaScript Syntax	Notes
Variable	let x = 5;	Mutable
Constant	const PI = 3.14;	Immutable
Number	let num = 10; or let float = 3.14;	No integer/float distinction
String	let str = "Hello";	Single or double quotes
Boolean	let isTrue = true;	true/false lowercase
Array	let arr = [1, 2, 3];	Dynamic size
Object	let obj = { key: "value" };	Key-value pairs
2. Operators
Type	Operators
Arithmetic	+ - * / % **
Comparison	== != === !== > < >= <=
Logical	&& || !
Ternary	condition ? expr1 : expr2
Note:

=== checks type + value (preferred)

== performs type coercion

3. Functions
Syntax	Example
Declaration	function greet() { ... }
Expression	const greet = function() { ... }
Arrow	const greet = () => { ... }
Parameters	function sum(a, b) { return a + b; }
4. Control Flow
Structure	Syntax
If/Else	if (condition) { ... } else { ... }
Switch	switch(val) { case 1: ... break; }
For Loop	for (let i = 0; i < 5; i++) { ... }
While	while (condition) { ... }
For...Of	for (const item of array) { ... }
5. Arrays
Method	Example
Add/Remove	push(), pop(), shift(), unshift()
Transform	map(), filter(), reduce()
Search	find(), includes(), indexOf()
Slice	slice(), splice()
6. Objects
Concept	Syntax
Access	obj.key or obj["key"]
Add Property	obj.newKey = value;
Delete	delete obj.key;
Methods	const obj = { log() { ... } };
7. Classes (OOP)
Feature	Syntax
Class	class Person { ... }
Constructor	constructor() { ... }
Method	greet() { ... }
Inheritance	class Student extends Person { ... }
8. Asynchronous JS
Concept	Syntax
Callback	fs.readFile(path, callback)
Promise	fetch(url).then().catch()
Async/Await	async function getData() { await ... }
9. Error Handling
Syntax	Example
Try/Catch	try { ... } catch(err) { ... }
Throw	throw new Error("Message");
10. Modules
Syntax	Example
Export	export const name = "Alice";
Import	import { name } from './file.js'
